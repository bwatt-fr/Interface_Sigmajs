/**
 * Smart Auto Complete plugin 
 * 
 * Copyright (c) 2011 Lakshan Perera (laktek.com)
 * Licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)  licenses.
 * 
*/

(function (b) {
    b.fn.smartAutoComplete = function () {
        if (1 > arguments.length) return b(this[0]).data("smart-autocomplete");
        var f = function (a, d) {
                var e = RegExp(a.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), "i");
                return b.grep(d, function (b) {
                    return e.test(b)
                })
            },
            h = {
                minCharLimit: 1,
                maxCharLimit: null,
                maxResults: null,
                delay: 0,
                disabled: !1,
                forceSelect: !1,
                typeAhead: !1,
                resultElement: "li",
                resultFormatter: function (b) {
                    return "<li>" + b + "</li>"
                },
                filter: function (a, d) {
                    var e = this;
                    b(e).data("smart-autocomplete");
                    if ("array" === b.type(d)) return f(a, d, e);
                    if ("string" === b.type(d)) return b.Deferred(function (c) {
                        b.ajax({
                            url: d,
                            data: {
                                term: a
                            },
                            dataType: "json"
                        }).success(function (b) {
                            c.resolve(f(a, b, e))
                        })
                    }).promise()
                },
                alignResultsContainer: !1,
                clearResults: function () {
                    var a = b(this.context).prev(".smart_autocomplete_type_ahead_field");
                    b(this.context).css({
                        background: a.css("background")
                    });
                    a.remove();
                    b(this.resultsContainer).html("")
                },
                setCurrentSelectionToContext: function () {
                    0 < this.rawResults.length && 0 <= this.currentSelection && b(this.context).val(this.rawResults[this.currentSelection])
                },
                setItemSelected: function (b) {
                    this.itemSelected = b
                },
                autocompleteFocused: !1,
                setAutocompleteFocused: function (b) {
                    this.autocompleteFocused = b
                }
            };
        b.event.special.keyIn = {
            setup: function () {
                return !1
            },
            _default: function (a) {
                var d = a.target,
                    e = b(d).data("smart-autocomplete"),
                    c = e.filter,
                    g = 0 < e.maxCharLimit ? e.maxCharLimit : Number.POSITIVE_INFINITY,
                    f = a.smartAutocompleteData.query;
                if (e.disabled || f.length > g) return !1;
                e.setItemSelected(!1);
                e.setAutocompleteFocused(!0);
                setTimeout(function () {
                    b.when(c.apply(e, [f, e.source])).done(function (a) {
                        a = 0 < e.maxResults ? a.splice(0, e.maxResults) : a;
                        b(d).trigger("resultsReady", [a])
                    })
                }, e.delay)
            }
        };
        b.event.special.resultsReady = {
            setup: function () {
                return !1
            },
            _default: function (a) {
                var d = a.target,
                    e = b(d).data("smart-autocomplete"),
                    a = a.smartAutocompleteData.results;
                if (e.disabled) return !1;
                b(d).smartAutoComplete().clearResults();
                e.rawResults = a;
                if (1 > a.length) return b(d).trigger("noResults"), !1;
                var c = b.map(a, function (b) {
                    return e.resultFormatter.apply(e, [b])
                }).join("");
                e.resultsContainer && b(e.resultsContainer).append(c);
                b(d).trigger("showResults", [a])
            }
        };
        b.event.special.showResults = {
            setup: function () {
                return !1
            },
            _default: function (a) {
                var d = a.target,
                    e = b(d).data("smart-autocomplete"),
                    c = b(e.resultsContainer),
                    a = a.smartAutocompleteData.results;
                e.typeAhead && a[0].substr(0, b(d).val().length) == b(d).val() && (a = a[0], b(d).before("<input class='smart_autocomplete_type_ahead_field' type='text' autocomplete='off' disabled='disabled' value='" + a + "'/>"), b(d).css({
                    position: "relative",
                    zIndex: 2,
                    background: "transparent"
                }), b(d).prev("input").css({
                    position: "absolute",
                    zIndex: 1,
                    overflow: "hidden",
                    background: b(d).css("background"),
                    borderColor: "transparent",
                    width: b(d).width(),
                    color: "silver"
                }), e.currentSelection = 0, c && b(d).trigger("itemFocus", c.children()[e.currentSelection]));
                c && (e.alignResultsContainer && c.css({
                    position: "absolute",
                    top: function () {
                        return b(d).offset().top + b(d).height()
                    },
                    left: function () {
                        return b(d).offset().left
                    },
                    width: function () {
                        return b(d).width()
                    },
                    zIndex: 1E3
                }), c.show())
            }
        };
        b.event.special.noResults = {
            setup: function () {
                return !1
            },
            _default: function (a) {
                a = b(a.target).data("smart-autocomplete");
                b(a.resultsContainer) && a.clearResults()
            }
        };
        b.event.special.itemSelect = {
            setup: function () {
                return !1
            },
            _default: function (a) {
                var d = a.target,
                    e = b(d).data("smart-autocomplete"),
                    a = a.smartAutocompleteData.item,
                    a = b(a).text() || b(a).val();
                b(d).val(a);
                e.setItemSelected(!0);
                e.originalCharCount = b(d).val().length;
                b(d).trigger("lostFocus")
            }
        };
        b.event.special.itemFocus = {
            setup: function () {
                return !1
            },
            _default: function (a) {
                b(a.smartAutocompleteData.item).addClass("smart_autocomplete_highlight")
            }
        };
        b.event.special.itemUnfocus = {
            setup: function () {
                return !1
            },
            _default: function (a) {
                b(a.smartAutocompleteData.item).removeClass("smart_autocomplete_highlight")
            }
        };
        b.event.special.lostFocus = {
            setup: function () {
                return !1
            },
            _default: function (a) {
                a = b(a.target).data("smart-autocomplete");
                a.forceSelect && !a.itemSelected && b(a.context).val("");
                a.setAutocompleteFocused(!1);
                a.clearResults();
                a.resultsContainer && b(a.resultsContainer).hide();
                a.currentSelection = null
            }
        };
        var i = arguments[0];
        return this.each(function () {
            var a = b.extend(h, b(this).data("smart-autocomplete"), i);
            a.context = this;
            if ("undefined" === b.type(a.resultsContainer)) {
                var d = b("<ul class='smart_autocomplete_container' style='display:none'></ul>");
                d.appendTo("body");
                a.resultsContainer = d;
                a.alignResultsContainer = !0
            }
            b(this).data("smart-autocomplete", a);
            b(this).keyup(function (a) {
                var c = b(this).data("smart-autocomplete");
                if ("38" == a.keyCode) {
                    if (c.resultsContainer) {
                        var a = c.currentSelection || 0,
                            d = b(c.resultsContainer).children();
                        0 <= a && b(c.context).trigger("itemUnfocus", d[a]);
                        0 >= --a && (a = 0);
                        c.currentSelection = a;
                        b(c.context).trigger("itemFocus", [d[a]])
                    }
                } else if ("40" == a.keyCode) if (c.resultsContainer && c.resultsContainer.is(":visible")) {
                    a = c.currentSelection;
                    d = b(c.resultsContainer).children();
                    0 <= a && b(c.context).trigger("itemUnfocus", d[a]);
                    if (isNaN(a) || null == a || ++a >= d.length) a = 0;
                    c.currentSelection = a;
                    b(c.context).trigger("itemFocus", [d[a]])
                } else b(c.context).trigger("keyIn", [b(this).val()]);
                else {
                    if ("39" == a.keyCode || "13" == a.keyCode) return a = b(c.context).prev(".smart_autocomplete_type_ahead_field"), c.resultsContainer && b(c.resultsContainer).is(":visible") ? (a = c.currentSelection, d = b(c.resultsContainer).children(), b(c.context).trigger("itemSelect", [d[a]])) : c.typeAhead && a.is(":visible") && b(c.context).trigger("itemSelect", [a]), !1;
                    a = b(c.context).val().length;
                    c.originalCharCount != a && (a >= c.minCharLimit ? b(c.context).trigger("keyIn", [b(this).val()]) : c.autocompleteFocused && (c.currentSelection = null, b(c.context).trigger("lostFocus")))
                }
            });
            b(this).focus(function () {
                b(this).closest("form").bind("keydown.block_for_smart_autocomplete", function (e) {
                    var c = b(a.context).prev(".smart_autocomplete_type_ahead_field");
                    if ("13" == e.keyCode) {
                        if (a.resultsContainer && b(a.resultsContainer).is(":visible")) return e = a.currentSelection, c = b(a.resultsContainer).children(), b(a.context).trigger("itemSelect", [c[e]]), !1;
                        if (a.typeAhead && c.is(":visible")) return b(a.context).trigger("itemSelect", [c]), !1
                    }
                });
                a.forceSelect && b(this).select()
            });
            b(document).bind("focusin click", function (e) {
                if (a.autocompleteFocused) {
                    var c = b.contains(a.resultsContainer[0], e.target);
                    e.target == a.resultsContainer[0] || e.target == a.context || c || (b(a.context).closest("form").unbind("keydown.block_for_smart_autocomplete"), b(a.context).trigger("lostFocus"))
                }
            });
            b(a.resultsContainer).delegate(a.resultElement, "mouseenter.smart_autocomplete", function () {
                b(a.resultsContainer).children();
                a.currentSelection = b(this).prevAll().length;
                b(a.context).trigger("itemFocus", [this])
            });
            b(a.resultsContainer).delegate(a.resultElement, "mouseleave.smart_autocomplete", function () {
                b(a.context).trigger("itemUnfocus", [this])
            });
            b(a.resultsContainer).delegate(a.resultElement, "click.smart_autocomplete", function () {
                b(a.context).trigger("itemSelect", [this]);
                return !1
            });
            b(this).bind({
                keyIn: function (a, b) {
                    a.smartAutocompleteData = {
                        query: b
                    }
                },
                resultsReady: function (a, b) {
                    a.smartAutocompleteData = {
                        results: b
                    }
                },
                showResults: function (a, b) {
                    a.smartAutocompleteData = {
                        results: b
                    }
                },
                noResults: function () {},
                lostFocus: function () {},
                itemSelect: function (a, b) {
                    a.smartAutocompleteData = {
                        item: b
                    }
                },
                itemFocus: function (a, b) {
                    a.smartAutocompleteData = {
                        item: b
                    }
                },
                itemUnfocus: function (a, b) {
                    a.smartAutocompleteData = {
                        item: b
                    }
                }
            })
        })
    }
})(jQuery);
